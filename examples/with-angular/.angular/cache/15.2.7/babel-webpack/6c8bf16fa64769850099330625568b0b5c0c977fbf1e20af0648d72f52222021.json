{"ast":null,"code":"var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nfunction filterAsync(target, predicate) {\n  return __async(this, null, function* () {\n    const results = yield Promise.all(target.map(predicate));\n    return target.filter((_, index) => results[index]);\n  });\n}\nconst getResponse = (request, handlers, resolutionContext) => __async(void 0, null, function* () {\n  const relevantHandlers = yield filterAsync(handlers, handler => {\n    return handler.test(request, resolutionContext).catch(() => false);\n  });\n  if (relevantHandlers.length === 0) {\n    return {\n      request,\n      handler: void 0,\n      response: void 0\n    };\n  }\n  const result = yield relevantHandlers.reduce((executionResult, handler) => __async(void 0, null, function* () {\n    const previousResults = yield executionResult;\n    if (!!(previousResults == null ? void 0 : previousResults.response)) {\n      return executionResult;\n    }\n    const result2 = yield handler.run(request, resolutionContext);\n    if (result2 === null) {\n      return null;\n    }\n    if (!result2.response) {\n      return {\n        request: result2.request,\n        handler: result2.handler,\n        response: void 0,\n        parsedResult: result2.parsedResult\n      };\n    }\n    return result2;\n  }), Promise.resolve(null));\n  if (!result) {\n    return {\n      request,\n      handler: void 0,\n      response: void 0\n    };\n  }\n  return {\n    handler: result.handler,\n    request: result.request,\n    parsedRequest: result.parsedResult,\n    response: result.response\n  };\n});\nexport { getResponse };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}