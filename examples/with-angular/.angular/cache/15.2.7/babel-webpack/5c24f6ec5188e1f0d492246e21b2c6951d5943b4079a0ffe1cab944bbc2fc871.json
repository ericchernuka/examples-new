{"ast":null,"code":"import _asyncToGenerator from \"/Users/kettanaito/Projects/mswjs/new-examples/node_modules/.pnpm/@babel+runtime@7.20.13/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// src/utils/uuid.ts\nfunction uuidv4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n}\n\n// src/utils/toInteractiveRequest.ts\nimport { format } from \"outvariant\";\n\n// src/utils/createLazyCallback.ts\nfunction createLazyCallback(options = {}) {\n  let calledTimes = 0;\n  let autoResolveTimeout;\n  let remoteResolve;\n  const callPromise = new Promise(resolve => {\n    remoteResolve = resolve;\n  }).finally(() => {\n    clearTimeout(autoResolveTimeout);\n  });\n  const fn = function (...args) {\n    var _a;\n    if (options.maxCalls && calledTimes >= options.maxCalls) {\n      (_a = options.maxCallsCallback) == null ? void 0 : _a.call(options);\n    }\n    remoteResolve(args);\n    calledTimes++;\n  };\n  fn.invoked = /*#__PURE__*/_asyncToGenerator(function* () {\n    autoResolveTimeout = setTimeout(() => {\n      remoteResolve([]);\n    }, 0);\n    return callPromise;\n  });\n  return fn;\n}\n\n// src/utils/toInteractiveRequest.ts\nfunction toInteractiveRequest(request) {\n  Object.defineProperty(request, \"respondWith\", {\n    writable: false,\n    enumerable: true,\n    value: createLazyCallback({\n      maxCalls: 1,\n      maxCallsCallback() {\n        throw new Error(format('Failed to respond to \"%s %s\" request: the \"request\" event has already been responded to.', request.method, request.url));\n      }\n    })\n  });\n  return request;\n}\nexport { uuidv4, toInteractiveRequest };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}