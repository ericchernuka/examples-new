{"ast":null,"code":"var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { RequestHandler } from './RequestHandler.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport { matchRequestUrl } from '../utils/matching/matchRequestUrl.mjs';\nimport { parseGraphQLRequest, parseDocumentNode } from '../utils/internal/parseGraphQLRequest.mjs';\nimport { getPublicUrlFromRequest } from '../utils/request/getPublicUrlFromRequest.mjs';\nimport { devUtils } from '../utils/internal/devUtils.mjs';\nfunction isDocumentNode(value) {\n  if (value == null) {\n    return false;\n  }\n  return typeof value === \"object\" && \"kind\" in value && \"definitions\" in value;\n}\nclass GraphQLHandler extends RequestHandler {\n  constructor(operationType, operationName, endpoint, resolver) {\n    let resolvedOperationName = operationName;\n    if (isDocumentNode(operationName)) {\n      const parsedNode = parseDocumentNode(operationName);\n      if (parsedNode.operationType !== operationType) {\n        throw new Error(`Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected \"${operationType}\", but got \"${parsedNode.operationType}\").`);\n      }\n      if (!parsedNode.operationName) {\n        throw new Error(`Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`);\n      }\n      resolvedOperationName = parsedNode.operationName;\n    }\n    const header = operationType === \"all\" ? `${operationType} (origin: ${endpoint.toString()})` : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`;\n    super({\n      info: {\n        header,\n        operationType,\n        operationName: resolvedOperationName\n      },\n      resolver\n    });\n    this.endpoint = endpoint;\n  }\n  parse(request) {\n    return __async(this, null, function* () {\n      return parseGraphQLRequest(request).catch(error => {\n        console.error(error);\n        return void 0;\n      });\n    });\n  }\n  predicate(request, parsedResult) {\n    if (!parsedResult) {\n      return false;\n    }\n    if (!parsedResult.operationName && this.info.operationType !== \"all\") {\n      const publicUrl = getPublicUrlFromRequest(request);\n      devUtils.warn(`Failed to intercept a GraphQL request at \"${request.method} ${publicUrl}\": anonymous GraphQL operations are not supported.\n\nConsider naming this operation or using \"graphql.operation()\" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `);\n      return false;\n    }\n    const hasMatchingUrl = matchRequestUrl(new URL(request.url), this.endpoint);\n    const hasMatchingOperationType = this.info.operationType === \"all\" || parsedResult.operationType === this.info.operationType;\n    const hasMatchingOperationName = this.info.operationName instanceof RegExp ? this.info.operationName.test(parsedResult.operationName || \"\") : parsedResult.operationName === this.info.operationName;\n    return hasMatchingUrl.matches && hasMatchingOperationType && hasMatchingOperationName;\n  }\n  extendInfo(_request, parsedResult) {\n    return {\n      query: (parsedResult == null ? void 0 : parsedResult.query) || \"\",\n      operationName: (parsedResult == null ? void 0 : parsedResult.operationName) || \"\",\n      variables: (parsedResult == null ? void 0 : parsedResult.variables) || {}\n    };\n  }\n  log(request, response, parsedRequest) {\n    return __async(this, null, function* () {\n      const loggedRequest = yield serializeRequest(request);\n      const loggedResponse = yield serializeResponse(response);\n      const statusColor = getStatusCodeColor(response.status);\n      const requestInfo = (parsedRequest == null ? void 0 : parsedRequest.operationName) ? `${parsedRequest == null ? void 0 : parsedRequest.operationType} ${parsedRequest == null ? void 0 : parsedRequest.operationName}` : `anonymous ${parsedRequest == null ? void 0 : parsedRequest.operationType}`;\n      console.groupCollapsed(devUtils.formatMessage(\"%s %s (%c%s%c)\"), getTimestamp(), `${requestInfo}`, `color:${statusColor}`, `${response.status} ${response.statusText}`, \"color:inherit\");\n      console.log(\"Request:\", loggedRequest);\n      console.log(\"Handler:\", this);\n      console.log(\"Response:\", loggedResponse);\n      console.groupEnd();\n    });\n  }\n}\nexport { GraphQLHandler, isDocumentNode };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}