{"ast":null,"code":"var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { devUtils } from '../utils/internal/devUtils.mjs';\nimport { isStringEqual } from '../utils/internal/isStringEqual.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport { matchRequestUrl } from '../utils/matching/matchRequestUrl.mjs';\nimport { getPublicUrlFromRequest } from '../utils/request/getPublicUrlFromRequest.mjs';\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies.mjs';\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl.mjs';\nimport { RequestHandler } from './RequestHandler.mjs';\nvar RESTMethods = /* @__PURE__ */(RESTMethods2 => {\n  RESTMethods2[\"HEAD\"] = \"HEAD\";\n  RESTMethods2[\"GET\"] = \"GET\";\n  RESTMethods2[\"POST\"] = \"POST\";\n  RESTMethods2[\"PUT\"] = \"PUT\";\n  RESTMethods2[\"PATCH\"] = \"PATCH\";\n  RESTMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods2[\"DELETE\"] = \"DELETE\";\n  return RESTMethods2;\n})(RESTMethods || {});\nclass RestHandler extends RequestHandler {\n  constructor(method, path, resolver, options) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      resolver,\n      once: options == null ? void 0 : options.once\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`);\n  }\n  parse(request, resolutionContext) {\n    return __async(this, null, function* () {\n      const url = new URL(request.url);\n      const match = matchRequestUrl(url, this.info.path, resolutionContext == null ? void 0 : resolutionContext.baseUrl);\n      const cookies = getAllRequestCookies(request);\n      return {\n        match,\n        cookies\n      };\n    });\n  }\n  predicate(request, parsedResult) {\n    const hasMatchingMethod = this.matchMethod(request.method);\n    const hasMatchingUrl = parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : isStringEqual(this.info.method, actualMethod);\n  }\n  extendInfo(_request, parsedResult) {\n    var _a;\n    return {\n      params: ((_a = parsedResult.match) == null ? void 0 : _a.params) || {},\n      cookies: parsedResult.cookies\n    };\n  }\n  log(request, response) {\n    return __async(this, null, function* () {\n      const publicUrl = getPublicUrlFromRequest(request);\n      const loggedRequest = yield serializeRequest(request);\n      const loggedResponse = yield serializeResponse(response);\n      const statusColor = getStatusCodeColor(response.status);\n      console.groupCollapsed(devUtils.formatMessage(\"%s %s %s (%c%s%c)\"), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, \"color:inherit\");\n      console.log(\"Request\", loggedRequest);\n      console.log(\"Handler:\", this);\n      console.log(\"Response\", loggedResponse);\n      console.groupEnd();\n    });\n  }\n}\nexport { RESTMethods, RestHandler };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}