type Attachment {
  downloadUrl: String!
  filename: String!
  id: ID!
}

type Brand {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Conversation {
  brand: Brand!
  createdAt: ISO8601DateTime!
  id: ID!

  """
  The time the most recent message was sent
  """
  lastMessageSentAt: ISO8601DateTime!
  messages: [Message!]!

  """
  The number of messages in this conversation
  """
  messagesCount: Int!

  """
  Other participants in this conversation
  """
  providers: [ConversationParticipant!]!

  """
  Whether the patient has read all the messages in this conversation
  """
  readByPatient: Boolean!
  subject: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Conversation.
"""
type ConversationConnection {
  """
  A list of edges.
  """
  edges: [ConversationEdge!]!

  """
  A list of nodes.
  """
  nodes: [Conversation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ConversationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Conversation!
}

interface ConversationParticipant {
  id: ID!
  name: Name!
}

type Country {
  code: String!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  provinces: [ProvinceState!]!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CreateMessage
"""
input CreateMessageInput {
  """
  The signed blob ids of the attachments
  """
  attachments: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The main content of the message
  """
  content: String!

  """
  The id of the conversation being replied to. Leave blank to start a new conversation
  """
  conversationId: ID

  """
  The subject of the message
  """
  subject: String
}

"""
Autogenerated return type of CreateMessage.
"""
type CreateMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conversation: Conversation
  errors: [DisplayableError!]!
}

type DisplayableError {
  fullMessage: String!
  message: String!
  path: [String!]!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of Login
"""
input LoginInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  oneTimeAccessToken: String
  password: String
}

"""
Autogenerated return type of Login.
"""
type LoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  jwt: String
  viewer: Patient
}

type Message {
  attachments: [Attachment!]!
  content: String!
  conversationId: ID!
  createdAt: ISO8601DateTime!
  id: ID!
  sender: ConversationParticipant!
  updatedAt: ISO8601DateTime!
}

type Mutation {
  """
  Start a new conversation
  """
  createMessage(
    """
    Parameters for CreateMessage
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """
  Trades a set of credentials for a JWT. An email is required, as well as one of
  either a password or a one-time access token
  """
  login(
    """
    Parameters for Login
    """
    input: LoginInput!
  ): LoginPayload

  """
  Marks a conversation as having been read by the current viewer
  """
  readConversation(
    """
    Parameters for ReadConversation
    """
    input: ReadConversationInput!
  ): ReadConversationPayload

  """
  Signs up a new patient
  """
  signup(
    """
    Parameters for Signup
    """
    input: SignupInput!
  ): SignupPayload
}

type Name {
  firstName: String!
  fullName: String!
  lastName: String!
  legalFullName: String!
  preferredName: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Patient implements ConversationParticipant {
  allergies: String
  createdAt: ISO8601DateTime!
  dateOfBirth: ISO8601Date
  email: String!
  financialExpectation: String
  healthCareNumber: String
  healthCareProvince: ProvinceState
  id: ID!
  locale: String!
  medicalConditions: String
  medications: String
  name: Name!
  phone: Phone!
  province: ProvinceState
  smsEnabled: Boolean!
  updatedAt: ISO8601DateTime!
  voicemailConsent: Boolean!
}

type Phone {
  areaCode: String!
  e164: String!
  rawNumber: String
  valid: Boolean!
}

type Provider implements ConversationParticipant {
  id: ID!
  name: Name!
}

type ProvinceState {
  code: String!
  country: Country!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  supported: Boolean!
  updatedAt: ISO8601DateTime!
}

type Query {
  """
  Gets conversations for the current viewer
  """
  conversation(id: ID!): Conversation!

  """
  Gets conversations for the current viewer
  """
  conversations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ConversationConnection!

  """
  Gets the currently authenticated patient
  """
  viewer: Patient
}

"""
Autogenerated input type of ReadConversation
"""
input ReadConversationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of a conversation
  """
  conversationId: ID!
}

"""
Autogenerated return type of ReadConversation.
"""
type ReadConversationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conversation: Conversation
}

"""
Autogenerated input type of Signup
"""
input SignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dateOfBirth: ISO8601Date
  email: String!
  financialExpectation: String
  firstName: String
  healthCareNumber: String
  healthCareProvinceId: ID
  lastName: String

  """
  The locale of the user
  """
  locale: String
  password: String
  phoneNumber: String
  preferredName: String
  provinceId: ID!
}

"""
Autogenerated return type of Signup.
"""
type SignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  jwt: String
  viewer: Patient
}
